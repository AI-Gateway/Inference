/*
 * MAPER Tecnologia SRL ("MAPER") CONFIDENTIAL
 * Unpublished Copyright (c) 2019-2020 Maper Tecnologia SRL, All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of MAPER. The intellectual and technical
 * concepts contained herein are proprietary to MAPER and may be covered by U.S. and Foreign Patents, patents in
 * process, and are protected by trade secret or copyright law. Dissemination of this information or reproduction of
 * this material is strictly forbidden unless prior written permission is obtained from MAPER. Access to the source code
 * contained herein is hereby forbidden to anyone except current MAPER employees, managers or contractors who have
 * executed Confidentiality and Non-disclosure agreements explicitly covering such access.
 *
 * The copyright notice above does not evidence any actual or intended publication or disclosure of this source code,
 * which includes information that is confidential and/or proprietary, and is a trade secret, of MAPER. ANY
 * REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC PERFORMANCE, OR PUBLIC DISPLAY OF OR THROUGH USE OF THIS SOURCE CODE
 * WITHOUT THE EXPRESS WRITTEN CONSENT OF MAPER IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS AND
 * INTERNATIONAL TREATIES. THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR
 * IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT
 * MAY DESCRIBE, IN WHOLE OR IN PART.
 */

syntax = "proto2";

import "MeasurementEnums.proto";

message ReportItem {
    optional TYPE type                   = 1;  // TYPE from MeasurementEnums.proto.
    optional ERROR_TYPE error            = 2;  // ERROR_TYPE from MeasurementEnums.proto.
    optional uint32 channels             = 3;  // Ored values of 'CHANNEL' in MeasurementEnums.proto.
    optional RANGE range                 = 4;  // RANGE from MeasurementEnums.proto.
    optional uint32 fs                   = 5;  // Real sampling frequency used for the measurement.
    optional uint32 sensitivity          = 6;  // Conversion factor to cook raw samples.
    optional ACCELEROMETER accelerometer = 7;  // Accelerometer model from MeasurementEnums.proto.
    optional string rawFormat            = 8;  // Format string to unpack raw measurement in higher level language.
    optional bytes value                 = 9;
}

message Report {
    optional uint32 configId  = 1;  //
    optional uint32 timestamp = 2;  // Unix timestap when the measurement was taken.
    optional ERROR_TYPE error = 3;  // ERROR_TYPE from MeasurementEnums.proto.
    repeated ReportItem item  = 4;
}
